/**
 * ESP-IDF Camera and SD Card Example
 * 
 * This example demonstrates how to:
 * - Initialize and configure an ESP32-CAM module
 * - Mount an SD card using SDMMC interface
 * - Capture photos every 5 seconds and save them to the SD card
 * 
 * Hardware Requirements:
 * - ESP32-CAM module (AI-Thinker or compatible)
 * - SD card inserted into the module
 */

/* Standard library includes */
#include <string.h>
#include <sys/unistd.h>
#include <sys/stat.h>
#include <sys/param.h>

/* ESP-IDF includes */
#include <esp_log.h>
#include <esp_system.h>
#include <nvs_flash.h>

/* FreeRTOS includes */
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

/* Camera includes */
#include "esp_camera.h"

/* SD card and filesystem includes */
#include "esp_vfs_fat.h"
#include "sdmmc_cmd.h"
#include "driver/sdmmc_host.h"
#include "sd_test_io.h"

#if SOC_SDMMC_IO_POWER_EXTERNAL
#include "sd_pwr_ctrl_by_on_chip_ldo.h"
#endif

/* Compatibility macro for IDF 5.x */
#ifndef portTICK_RATE_MS
#define portTICK_RATE_MS portTICK_PERIOD_MS
#endif

/* Application constants */
#define EXAMPLE_MAX_CHAR_SIZE 64
#define MOUNT_POINT "/sdcard"
#define PICTURE_INTERVAL_MS 5000
#define EXAMPLE_IS_UHS1 (CONFIG_EXAMPLE_SDMMC_SPEED_UHS_I_SDR50 || CONFIG_EXAMPLE_SDMMC_SPEED_UHS_I_DDR50)

static const char *TAG = "camera_sd_example";

/* ESP32-CAM (AI-Thinker) Pin Definitions */
#define CAM_PIN_PWDN    32
#define CAM_PIN_RESET   -1  // Software reset will be performed
#define CAM_PIN_XCLK    0
#define CAM_PIN_SIOD    26  // SDA
#define CAM_PIN_SIOC    27  // SCL

#define CAM_PIN_D7      35
#define CAM_PIN_D6      34
#define CAM_PIN_D5      39
#define CAM_PIN_D4      36
#define CAM_PIN_D3      21
#define CAM_PIN_D2      19
#define CAM_PIN_D1      18
#define CAM_PIN_D0      5
#define CAM_PIN_VSYNC   25
#define CAM_PIN_HREF    23
#define CAM_PIN_PCLK    22

/* Global Variables */
static sdmmc_card_t *sd_card = NULL;

/* Camera Configuration */
#if ESP_CAMERA_SUPPORTED
static camera_config_t camera_config = {
    /* Pin configuration */
    .pin_pwdn       = CAM_PIN_PWDN,
    .pin_reset      = CAM_PIN_RESET,
    .pin_xclk       = CAM_PIN_XCLK,
    .pin_sccb_sda   = CAM_PIN_SIOD,
    .pin_sccb_scl   = CAM_PIN_SIOC,
    
    /* Data pins */
    .pin_d7         = CAM_PIN_D7,
    .pin_d6         = CAM_PIN_D6,
    .pin_d5         = CAM_PIN_D5,
    .pin_d4         = CAM_PIN_D4,
    .pin_d3         = CAM_PIN_D3,
    .pin_d2         = CAM_PIN_D2,
    .pin_d1         = CAM_PIN_D1,
    .pin_d0         = CAM_PIN_D0,
    .pin_vsync      = CAM_PIN_VSYNC,
    .pin_href       = CAM_PIN_HREF,
    .pin_pclk       = CAM_PIN_PCLK,

    /* Clock configuration */
    .xclk_freq_hz   = 20000000,    // XCLK 20MHz for OV2640
    .ledc_timer     = LEDC_TIMER_0,
    .ledc_channel   = LEDC_CHANNEL_0,

    /* Image configuration */
    .pixel_format   = PIXFORMAT_JPEG,
    .frame_size     = FRAMESIZE_QVGA,    // QVGA for better performance
    .jpeg_quality   = 12,                // 0-63, lower = higher quality
    .fb_count       = 1,
    .fb_location    = CAMERA_FB_IN_PSRAM,
    .grab_mode      = CAMERA_GRAB_WHEN_EMPTY,
};

/**
 * @brief Initialize the camera module
 * @return ESP_OK on success, error code otherwise
 */
static esp_err_t init_camera(void)
{
    ESP_LOGI(TAG, "Initializing camera...");
    
    esp_err_t err = esp_camera_init(&camera_config);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Camera initialization failed: %s", esp_err_to_name(err));
        return err;
    }
    
    ESP_LOGI(TAG, "Camera initialized successfully");
    return ESP_OK;
}
#endif // ESP_CAMERA_SUPPORTED

/**
 * @brief Write data to a file on the SD card
 * @param path File path to write to
 * @param data Data buffer to write
 * @param size Size of data to write
 * @return ESP_OK on success, ESP_FAIL otherwise
 */
static esp_err_t write_file_to_sd(const char *path, const uint8_t *data, size_t size)
{
    ESP_LOGI(TAG, "Writing file: %s (%zu bytes)", path, size);
    
    FILE *file = fopen(path, "wb");
    if (file == NULL) {
        ESP_LOGE(TAG, "Failed to open file for writing: %s", path);
        return ESP_FAIL;
    }
    
    size_t written = fwrite(data, 1, size, file);
    fclose(file);
    
    if (written != size) {
        ESP_LOGE(TAG, "Failed to write complete data to file (wrote %zu of %zu bytes)", written, size);
        return ESP_FAIL;
    }
    
    ESP_LOGI(TAG, "File written successfully: %zu bytes", written);
    return ESP_OK;
}

/**
 * @brief Read and display content from a text file
 * @param path File path to read from
 * @return ESP_OK on success, ESP_FAIL otherwise
 */
static esp_err_t read_file_from_sd(const char *path)
{
    ESP_LOGI(TAG, "Reading file: %s", path);
    
    FILE *file = fopen(path, "r");
    if (file == NULL) {
        ESP_LOGE(TAG, "Failed to open file for reading: %s", path);
        return ESP_FAIL;
    }
    
    char line[EXAMPLE_MAX_CHAR_SIZE];
    if (fgets(line, sizeof(line), file) != NULL) {
        // Strip newline character
        char *newline_pos = strchr(line, '\n');
        if (newline_pos) {
            *newline_pos = '\0';
        }
        ESP_LOGI(TAG, "File content: '%s'", line);
    }
    
    fclose(file);
    return ESP_OK;
}

/**
 * @brief Initialize and mount the SD card
 * @return ESP_OK on success, error code otherwise
 */
static esp_err_t init_sd_card(void)
{
    ESP_LOGI(TAG, "Initializing SD card...");
    
    /* Configure filesystem mount options */
    esp_vfs_fat_sdmmc_mount_config_t mount_config = {
#ifdef CONFIG_EXAMPLE_FORMAT_IF_MOUNT_FAILED
        .format_if_mount_failed = true,
#else
        .format_if_mount_failed = false,
#endif
        .max_files = 5,
        .allocation_unit_size = 16 * 1024
    };

    /* Configure SDMMC host */
    sdmmc_host_t host = SDMMC_HOST_DEFAULT();
    
#if CONFIG_EXAMPLE_SDMMC_SPEED_HS
    host.max_freq_khz = SDMMC_FREQ_HIGHSPEED;
#elif CONFIG_EXAMPLE_SDMMC_SPEED_UHS_I_SDR50
    host.slot = SDMMC_HOST_SLOT_0;
    host.max_freq_khz = SDMMC_FREQ_SDR50;
    host.flags &= ~SDMMC_HOST_FLAG_DDR;
#elif CONFIG_EXAMPLE_SDMMC_SPEED_UHS_I_DDR50
    host.slot = SDMMC_HOST_SLOT_0;
    host.max_freq_khz = SDMMC_FREQ_DDR50;
#endif

    /* Initialize power control if needed */
#if CONFIG_EXAMPLE_SD_PWR_CTRL_LDO_INTERNAL_IO
    sd_pwr_ctrl_ldo_config_t ldo_config = {
        .ldo_chan_id = CONFIG_EXAMPLE_SD_PWR_CTRL_LDO_IO_ID,
    };
    sd_pwr_ctrl_handle_t pwr_ctrl_handle = NULL;

    esp_err_t ret = sd_pwr_ctrl_new_on_chip_ldo(&ldo_config, &pwr_ctrl_handle);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to create LDO power control driver: %s", esp_err_to_name(ret));
        return ret;
    }
    host.pwr_ctrl_handle = pwr_ctrl_handle;
#endif

    /* Configure SD card slot */
    sdmmc_slot_config_t slot_config = SDMMC_SLOT_CONFIG_DEFAULT();
    
#if EXAMPLE_IS_UHS1
    slot_config.flags |= SDMMC_SLOT_FLAG_UHS1;
#endif

#ifdef CONFIG_EXAMPLE_SDMMC_BUS_WIDTH_4
    slot_config.width = 4;
#else
    slot_config.width = 1;
#endif

    /* Configure GPIO pins for SD card */
#ifdef CONFIG_SOC_SDMMC_USE_GPIO_MATRIX
    slot_config.clk = CONFIG_EXAMPLE_PIN_CLK;
    slot_config.cmd = CONFIG_EXAMPLE_PIN_CMD;
    slot_config.d0 = CONFIG_EXAMPLE_PIN_D0;
#ifdef CONFIG_EXAMPLE_SDMMC_BUS_WIDTH_4
    slot_config.d1 = CONFIG_EXAMPLE_PIN_D1;
    slot_config.d2 = CONFIG_EXAMPLE_PIN_D2;
    slot_config.d3 = CONFIG_EXAMPLE_PIN_D3;
#endif
#endif

    /* Enable internal pullups for debugging */
    slot_config.flags |= SDMMC_SLOT_FLAG_INTERNAL_PULLUP;

    /* Mount the filesystem */
    ESP_LOGI(TAG, "Mounting filesystem...");
    esp_err_t ret = esp_vfs_fat_sdmmc_mount(MOUNT_POINT, &host, &slot_config, &mount_config, &sd_card);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount filesystem. "
                         "Consider enabling CONFIG_EXAMPLE_FORMAT_IF_MOUNT_FAILED option.");
        } else {
            ESP_LOGE(TAG, "Failed to initialize SD card: %s. "
                         "Make sure SD card lines have pull-up resistors.", esp_err_to_name(ret));
#ifdef CONFIG_EXAMPLE_DEBUG_PIN_CONNECTIONS
            check_sd_card_pins(&pin_config, sizeof(pins) / sizeof(pins[0]));
#endif
        }
        return ret;
    }
    
    ESP_LOGI(TAG, "Filesystem mounted successfully");
    sdmmc_card_print_info(stdout, sd_card);
    
    return ESP_OK;
}

/**
 * @brief Cleanup and unmount SD card
 */
static void cleanup_sd_card(void)
{
    if (sd_card) {
        esp_vfs_fat_sdcard_unmount(MOUNT_POINT, sd_card);
        ESP_LOGI(TAG, "SD card unmounted");
    }
    
#if CONFIG_EXAMPLE_SD_PWR_CTRL_LDO_INTERNAL_IO
    // Note: In real implementation, you'd need to track the power control handle
    // and call sd_pwr_ctrl_del_on_chip_ldo() here
#endif
}

/**
 * @brief Capture and save a photo to SD card
 * @return ESP_OK on success, error code otherwise
 */
static esp_err_t capture_and_save_photo(void)
{
#if ESP_CAMERA_SUPPORTED
    ESP_LOGI(TAG, "Capturing photo...");
    
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (frame_buffer == NULL) {
        ESP_LOGE(TAG, "Failed to capture photo");
        return ESP_FAIL;
    }
    
    ESP_LOGI(TAG, "Photo captured successfully (%zu bytes)", frame_buffer->len);
    
    /* Save photo to SD card */
    const char *photo_path = MOUNT_POINT "/picture.jpg";
    esp_err_t ret = write_file_to_sd(photo_path, frame_buffer->buf, frame_buffer->len);
    
    /* Return the frame buffer */
    esp_camera_fb_return(frame_buffer);
    
    return ret;
#else
    ESP_LOGW(TAG, "Camera not supported on this platform");
    return ESP_ERR_NOT_SUPPORTED;
#endif
}

/**
 * @brief Main application entry point
 */
void app_main(void)
{
    ESP_LOGI(TAG, "Starting Camera SD Card Example");
    
    /* Initialize camera */
#if ESP_CAMERA_SUPPORTED
    if (init_camera() != ESP_OK) {
        ESP_LOGE(TAG, "Camera initialization failed, exiting");
        return;
    }
#else
    ESP_LOGW(TAG, "Camera not supported, continuing with SD card only");
#endif

    /* Initialize SD card */
    if (init_sd_card() != ESP_OK) {
        ESP_LOGE(TAG, "SD card initialization failed, exiting");
        return;
    }

#ifdef CONFIG_EXAMPLE_FORMAT_SD_CARD
    /* Format SD card if requested */
    ESP_LOGI(TAG, "Formatting SD card...");
    esp_err_t ret = esp_vfs_fat_sdcard_format(MOUNT_POINT, sd_card);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to format SD card: %s", esp_err_to_name(ret));
        cleanup_sd_card();
        return;
    }
    ESP_LOGI(TAG, "SD card formatted successfully");
#endif

    /* Main application loop */
    ESP_LOGI(TAG, "Starting photo capture loop...");
    while (1) {
        esp_err_t ret = capture_and_save_photo();
        if (ret != ESP_OK) {
            ESP_LOGE(TAG, "Failed to capture/save photo: %s", esp_err_to_name(ret));
        }
        
        /* Wait before next capture */
        vTaskDelay(PICTURE_INTERVAL_MS / portTICK_PERIOD_MS);
    }

    /* Cleanup (this code will never be reached in the current implementation) */
    cleanup_sd_card();
}
